--======= locals ===========local random = math.randomlocal tinsert = table.insertlocal floor = math.floorlocal CAMERA = CAMERAlocal GAME = GAMElocal Draw = love.graphics.drawlocal microtime = love.timer.getMicroTime--========================================--==========================================local function DrawBucket(self)	if self.complete then		if self.buffer then			love.graphics.draw(self.buffer, self.x-CAMERA.X, self.y-CAMERA.Y)		else		self.buffer = love.graphics.newFramebuffer(1024,1024)		love.graphics.setRenderTarget(self.buffer)			for i = 0, BUCKET_XCOUNT-1 do				for j = 0, BUCKET_YCOUNT-1 do					if self.tubs[i] and self.tubs[i][j]and self.tubs[i][j][1] then												if not self.tubs[i][j][4] then									self.tubs[i][j][4] = love.graphics.newImage(self.tubs[i][j][2])							end							love.graphics.draw(self.tubs[i][j][4], i*TUB_SIZE, j*TUB_SIZE)					end				end			end			if self.type then				love.graphics.print(self.type, 20,20)			end						love.graphics.setRenderTarget()			love.graphics.draw(self.buffer, self.x-CAMERA.X, self.y-CAMERA.Y) -- shoudl reduce flicker		end		--draw things that arent buffered 		for i = 1, #self.items do			self.items[i]:Draw(self.x-CAMERA.X,self.y-CAMERA.Y)		end		if self.creatures then			for i = 1, #self.creatures do				self.creatures[i]:Draw()			end		end	endendlocal function UpdateBucket(self,dt)	if self.creatures then			for i = 1, #self.creatures do				if self.creatures[i] then					self.creatures[i]:Update(dt)				end			end		endend--=========================================================local function FillBucket(b, a,depth, label)	local found		if label ~= "air" then		for i = 0, BUCKET_XCOUNT-1 do			for j = 0, BUCKET_YCOUNT-1 do				if (j*TUB_SIZE)+b.y > depth + World.Points[a][i+1] then					if not b.tubs[i] then b.tubs[i] = {} end						b.tubs[i][j] = CreateBaseTexture(label,b,i,j)						found = depth				end			end		end	end	return foundendlocal function NewFillBucket(b, i)	local oldlabel 	for j = 1, #SELECTED_WORLD.layers do		local info = SELECTED_WORLD.layers[j]		local dist = World.Points[i][1]+info.depth		if info.label then			local test = FillBucket(b,i,info.depth, info.label)			if not oldlabel and World.Points[i][1]+info.depth > b.y and World.Points[i][1]+info.depth < b.y+BUCKET_HEIGHT then				b.type = "surface"						end			if test then				oldlabel = test			end		end	endendlocal function CheckOres(b)	local depth = (World.Points[b.i][1]+World.Points[b.i+1][1])/2	for ore, info in pairs(SELECTED_WORLD.Ores) do		if b.y > info.mindepth+depth and b.y < info.maxdepth+depth then						if true then				local t = {}				for i = 0, BUCKET_XCOUNT-1 do					t[i] = {}				end												for a = 1, random(50) do					local x,y = random(0,BUCKET_XCOUNT), random(0,BUCKET_YCOUNT)				--	print(x,y)					for i = 1, info.size-random(info.size) do						for j = 1, info.size-random(info.size) do							if t[i+x] and (y+j < BUCKET_YCOUNT) then								t[i+x][y+j] = true							end						end					end				end								for x = 0, BUCKET_XCOUNT-1 do					for y = 0, BUCKET_YCOUNT-1 do													local count = 0							for i = -1,1 do								for j = -1,1 do									if t[x+i] and t[x+i][y+j] then										count = count + 1									end								end							end																					if count < 5 then								t[x][y] = nil							elseif count > 6 then								t[x][y] = true							end					end									end									for x = 0, BUCKET_XCOUNT-1 do					for y = 0, BUCKET_YCOUNT-1 do						if t[x][y] then							b.tubs[x][y] = CreateBaseTexture(ore,b,x,y)						end					end				end							end				end	endendlocal function PlotHoles(b)end function NewBucket(world,i,j)	if not CRASH_WHEN_GOING_TO_THE_LEFT and  not World.Points[i] then		return 	end	local b = {}	b.tubs = {}		b.items = {}	b.Draw = DrawBucket	b.Update = UpdateBucket	b.i = i	b.j = j		if not World.Buckets[i] then		World.Buckets[i] = {}	end		World.Buckets[i][j] = b		b.x = i*BUCKET_WIDTH-0.5	b.y = j*BUCKET_HEIGHT-0.1		NewFillBucket(b,i) -- needs renaming			if b.type == "surface" then		b.creatures = {}			CheckCreatures(b)		end				CheckOres(b)					PlotHoles(b)	return bend