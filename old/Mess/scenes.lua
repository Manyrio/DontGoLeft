--[[need to seperate Scene from weather--]]--====== locals =====local tinsert = table.insertlocal random = math.randomlocal Draw = love.graphics.draw--==============Scene = {}tinsert(EVENT_UPDATE, Scene)tinsert(EVENT_DRAW, Scene)MAX_HEIGHT = -6000--======================================Scene.stars = love.graphics.newFramebuffer(SCREEN_WIDTH*2, SCREEN_HEIGHT*2)love.graphics.setRenderTarget(Scene.stars)for i = 1, 400 do		local x = random(SCREEN_WIDTH*2)		local y = random(SCREEN_HEIGHT*2)		local size = random(15)/10		love.graphics.setColor(255,255,255, random(100,255))		love.graphics.circle("fill", x, y, size)endlove.graphics.setRenderTarget()--=====================================--use one set of image data to produce all the gradientsScene.imgData = love.image.newImageData(SCREEN_WIDTH, SCREEN_HEIGHT)Scene.type = {}Scene.type.night = {}Scene.type.night.gradTop = {0,30,200, 0}Scene.type.night.gradBottom = {150,200,255, 255}Scene.type.day = {}																	Scene.type.day.gradTop = {200,200,240, 255}Scene.type.day.gradBottom = {100,100,240, 255}																		SELECTED_Scene = Scene.type.nightScene.topgrad = falseScene.botgrad = falseScene.Transition = 0function Scene:SetGradient(bottom, top)	Scene.imgData:mapPixel(function(x,y,r,g,b,a)	r =  top[1]*(y/SCREEN_HEIGHT) + (bottom[1]*((SCREEN_HEIGHT - y)/SCREEN_HEIGHT))	g = top[2]*(y/SCREEN_HEIGHT) + (bottom[2]*((SCREEN_HEIGHT - y)/SCREEN_HEIGHT))	b = top[3]*(y/SCREEN_HEIGHT) + (bottom[3]*((SCREEN_HEIGHT - y)/SCREEN_HEIGHT))	a = top[4]*(y/SCREEN_HEIGHT) + (bottom[4]*((SCREEN_HEIGHT - y)/SCREEN_HEIGHT))	return r,g,b,a	end)end--[[function Scene:ChangeScene(Scene)	if self.type[Scene] then		SELECTED_Scene = self.type[Scene]		self:SetGradient(SELECTED_Scene.gradBottom, SELECTED_Scene.gradTop)		self.newbg = love.graphics.newImage(self.imgData)		self.Transition = 1	endendScene:SetGradient(SELECTED_Scene.gradBottom, SELECTED_Scene.gradTop)Scene.bg = love.graphics.newImage(Scene.imgData)--]]local function OneThird(color1, color2)	local r = color1[1] + (color2[1]-color1[1])/3	local g = color1[2] + (color2[2]-color1[2])/3	local b = color1[3] + (color2[3]-color1[3])/3	local a = color1[4] + (color2[4]-color1[4])/3	return {r,g,b,a}endlocal function TwoThird(color1, color2)	local r = color1[1] + (color2[1]-color1[1])/3*2	local g = color1[2] + (color2[2]-color1[2])/3*2	local b = color1[3] + (color2[3]-color1[3])/3*2	local a = color1[4] + (color2[4]-color1[4])/3*2	return {r,g,b,a}endlocal function ColorDiff(color1, color2, frac)	local r = color1[1]*frac + color2[1]*(1-frac)	local g = color1[2]*frac + color2[2]*(1-frac)	local b = color1[3]*frac + color2[3]*(1-frac)	local a = color1[4]*frac + color2[4]*(1-frac)	return {r,g,b,a}endScene.onethird = TwoThird(SELECTED_Scene.gradTop,SELECTED_Scene.gradBottom)Scene.twothird = OneThird(SELECTED_Scene.gradBottom, SELECTED_Scene.gradTop)Scene:SetGradient(Scene.onethird, SELECTED_Scene.gradBottom )Scene.botgrad = love.graphics.newImage(Scene.imgData)Scene:SetGradient(SELECTED_Scene.gradTop, Scene.twothird)Scene.topgrad = love.graphics.newImage(Scene.imgData)function Scene:DrawStars()	local stary = -1*CAMERA_Y/10	local starx = CAMERA_X/10				while starx > SCREEN_WIDTH*2 do		starx = starx - SCREEN_WIDTH*2	end		while starx < 0-SCREEN_WIDTH*2 do		starx = starx + SCREEN_WIDTH*2	end		while stary> SCREEN_HEIGHT do		stary = stary-SCREEN_HEIGHT	end		if starx < SCREEN_WIDTH and starx+SCREEN_WIDTH*2 > 0 then		Draw(self.stars, starx, stary)	end			if starx > 0 then		Draw(self.stars, starx-SCREEN_WIDTH*2, stary)	elseif starx+SCREEN_WIDTH*2 < SCREEN_WIDTH then		Draw(self.stars, starx + SCREEN_WIDTH*2,stary)	end		if stary > 0 then		love.graphics.draw(self.stars, starx, stary-SCREEN_HEIGHT)		if starx > 0 then			Draw(self.stars, starx-SCREEN_WIDTH*2, stary-SCREEN_HEIGHT)		elseif starx+SCREEN_WIDTH*2 < SCREEN_WIDTH then			Draw(self.stars, starx + SCREEN_WIDTH*2,stary-SCREEN_HEIGHT)		end	endendfunction Scene:Draw()	if CAMERA_Y < SCREEN_HEIGHT then -- only draw above ground		if self.stars then			self:DrawStars()		end				if CAMERA_Y  > -SCREEN_HEIGHT then			Draw(self.botgrad, 0, -1*CAMERA_Y)			love.graphics.setColor(ColorDiff(Scene.onethird, Scene.twothird, CAMERA_Y/MAX_HEIGHT))			love.graphics.rectangle("fill", 0, -1*CAMERA_Y-SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT)			love.graphics.setColor(SELECTED_Scene.gradBottom)			love.graphics.rectangle("fill", 0,-1*CAMERA_Y+SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT)		elseif CAMERA_Y <= -SCREEN_HEIGHT and CAMERA_Y-SCREEN_HEIGHT < MAX_HEIGHT then			Draw(self.topgrad, 0, -1*CAMERA_Y + MAX_HEIGHT)			love.graphics.setColor(ColorDiff(Scene.onethird, Scene.twothird, CAMERA_Y/MAX_HEIGHT))			love.graphics.rectangle("fill", 0, -1*CAMERA_Y+MAX_HEIGHT+SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT)		else			love.graphics.setColor(ColorDiff(Scene.onethird, Scene.twothird, CAMERA_Y/MAX_HEIGHT))			love.graphics.rectangle( "fill", 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)		end else	love.graphics.setColor(SELECTED_Scene.gradBottom)	love.graphics.rectangle("fill", 0,0, SCREEN_WIDTH, SCREEN_HEIGHT) end love.graphics.setColor(255,255,255,255)endfunction Scene:Update(dt)	end